{"ast":null,"code":"import firebase from 'firebase';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBZ9iO9ZwY3Eck9_Ja_NTfaoEVo_sWzZoc\",\n  authDomain: \"pushnotification-124c9.firebaseapp.com\",\n  databaseURL: \"https://pushnotification-124c9.firebaseio.com\",\n  projectId: \"pushnotification-124c9\",\n  storageBucket: \"pushnotification-124c9.appspot.com\",\n  messagingSenderId: \"661909794742\",\n  appId: \"1:661909794742:web:a00aab3b2b8800a82b5b17\",\n  measurementId: \"G-C1WGZPEPBX\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\nmessaging.usePublicVapidKey('BKsyqq2G4vKCbUw5-9892nXab4rUTLfvwsnbD3lZd8SvjdDHQulPh0LfPCqFXokVTN6BexuSTZqHxkPphcxhuCg');\nexport const askForPermissioToReceiveNotifications = async () => {\n  return new Promise(function (resolve, reject) {\n    try {\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          messaging.getToken().then(currentToken => {\n            if (currentToken) {\n              //console.log(currentToken);\n              return resolve(JSON.stringify({\n                \"token\": currentToken\n              }));\n            } else {\n              console.log('No Instance ID token available. Request permission to generate one.');\n            }\n          }).catch(err => {\n            console.log('An error occurred while retrieving token. ', err);\n          });\n        } else {\n          console.log('Unable to get permission to notify.');\n          return resolve(JSON.stringify({\n            \"permission\": 'disagree'\n          }));\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n};","map":{"version":3,"sources":["/home/hubertyu/Code/FirebaseCloudMessagePush/fcm_react_node/src/register/push-notification.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","messaging","usePublicVapidKey","askForPermissioToReceiveNotifications","Promise","resolve","reject","Notification","requestPermission","then","permission","getToken","currentToken","JSON","stringify","console","log","catch","err","error"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,wCAFO;AAGnBC,EAAAA,WAAW,EAAE,+CAHM;AAInBC,EAAAA,SAAS,EAAE,wBAJQ;AAKnBC,EAAAA,aAAa,EAAE,oCALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAArB;AAUAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB;AAEA,MAAMU,SAAS,GAAGX,QAAQ,CAACW,SAAT,EAAlB;AAEAA,SAAS,CAACC,iBAAV,CAA4B,yFAA5B;AAEA,OAAO,MAAMC,qCAAqC,GAAG,YAAY;AAC/D,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAiBC,MAAjB,EAAwB;AACzC,QAAI;AACFC,MAAAA,YAAY,CAACC,iBAAb,GAAiCC,IAAjC,CAAuCC,UAAD,IAAgB;AACpD,YAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC5BT,UAAAA,SAAS,CAACU,QAAV,GAAqBF,IAArB,CAA2BG,YAAD,IAAkB;AAC1C,gBAAIA,YAAJ,EAAkB;AAChB;AACA,qBAAOP,OAAO,CAAGQ,IAAI,CAACC,SAAL,CAAe;AAC9B,yBAAQF;AADsB,eAAf,CAAH,CAAd;AAGD,aALD,MAKO;AACLG,cAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACD;AACF,WATD,EASGC,KATH,CASUC,GAAD,IAAS;AAChBH,YAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DE,GAA1D;AACD,WAXD;AAYD,SAbD,MAaO;AACLH,UAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA,iBAAOX,OAAO,CACZQ,IAAI,CAACC,SAAL,CAAe;AACf,0BAAa;AADE,WAAf,CADY,CAAd;AAKD;AACF,OAtBD;AAuBD,KAxBD,CAwBE,OAAOK,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACD;AACF,GA5BM,CAAP;AA6BD,CA9BM","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBZ9iO9ZwY3Eck9_Ja_NTfaoEVo_sWzZoc\",\n  authDomain: \"pushnotification-124c9.firebaseapp.com\",\n  databaseURL: \"https://pushnotification-124c9.firebaseio.com\",\n  projectId: \"pushnotification-124c9\",\n  storageBucket: \"pushnotification-124c9.appspot.com\",\n  messagingSenderId: \"661909794742\",\n  appId: \"1:661909794742:web:a00aab3b2b8800a82b5b17\",\n  measurementId: \"G-C1WGZPEPBX\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst messaging = firebase.messaging();\n\nmessaging.usePublicVapidKey('BKsyqq2G4vKCbUw5-9892nXab4rUTLfvwsnbD3lZd8SvjdDHQulPh0LfPCqFXokVTN6BexuSTZqHxkPphcxhuCg');\n\nexport const askForPermissioToReceiveNotifications = async () => {\n  return new Promise(function(resolve,reject){\n    try {     \n      Notification.requestPermission().then((permission) => {\n        if (permission === 'granted') {\n          messaging.getToken().then((currentToken) => {\n            if (currentToken) {\n              //console.log(currentToken);\n              return resolve(  JSON.stringify({\n                \"token\":currentToken\n                }));\n            } else {\n              console.log('No Instance ID token available. Request permission to generate one.');\n            }\n          }).catch((err) => {\n            console.log('An error occurred while retrieving token. ', err);\n          });   \n        } else {\n          console.log('Unable to get permission to notify.');\n          return resolve(\n            JSON.stringify({\n            \"permission\":'disagree'\n            })\n          );\n        }\n      });   \n    } catch (error) {\n      console.error(error);\n    }\n  })\n}"]},"metadata":{},"sourceType":"module"}